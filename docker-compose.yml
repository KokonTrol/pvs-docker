version: "3.8"
services:
  # Orion is the context broker
  orion:
    labels:
      org.fiware: 'pc'
    image: fiware/orion:latest
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    networks:
      - default
    expose:
      - 1026
    ports:
      - 1026:1026 # localhost:1026
    command: -dbhost mongo-db -logLevel DEBUG
    healthcheck:
      test: curl --fail -s http://orion:1026/version || exit 1
      interval: 5s

  # IoT-Agent is configured for the UltraLight Protocol
  iot-agent:
    labels:
      org.fiware: 'pc'
    image: fiware/iotagent-ul:latest
    hostname: iot-agent
    container_name: fiware-iot-agent
    depends_on:
      - mongo-db
    networks:
      - default
    expose:
      - 4041
      - 7896
    ports:
      - 4041:4041 # localhost:4041
      - 7896:7896 # localhost:7896
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=1026 # port the context broker listens on to update context
      - IOTA_NORTH_PORT=4041
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=27017 # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
      - IOTA_HTTP_PORT=7896 # The port used for device traffic over HTTP
      - IOTA_PROVIDER_URL=http://iot-agent:4041
      - IOTA_DEFAULT_RESOURCE=/iot/d
    healthcheck:
      interval: 5s


  sth-comet:
    labels:
      org.fiware: 'pc'
    image: fiware/sth-comet
    hostname: sth-comet
    container_name: fiware-sth-comet
    links:
      - mongo-db
    depends_on:
      - mongo-db
    expose:
      - 8666
    ports:
      - 8666:8666
    networks:
      - default
    environment:
        - STH_HOST=0.0.0.0
        - STH_PORT=8666
        - DB_PREFIX=sth_
        - DB_URI=mongo-db:27017
        - LOGOPS_LEVEL=DEBUG


  # Tutorial acts as a series of dummy IoT Sensors over HTTP
  pc:
    labels:
      org.fiware: 'pc'
    image: fiware/tutorials.context-provider
    hostname: iot-sensors
    container_name: pc-container
    depends_on:
      - orion
      - iot-agent
      - sth-comet
    networks:
      default:
        aliases:
          - pc
          - context-provider
    expose:
      - 3000
      - 3001
    ports:
      - 3000:3000 # localhost:3000
      - 3001:3001 # localhost:3001
    environment:
      - "MONGO_URL=mongodb://mongo-db:27017"
      - "DEBUG=tutorial:*"
      - "WEB_APP_PORT=3000" # Port used by the content provider proxy and web-app for viewing data
      - "IOTA_HTTP_HOST=iot-agent"
      - "IOTA_HTTP_PORT=7896"
      - "DUMMY_DEVICES_PORT=3001" # Port used by the dummy IOT devices to receive commands
      - "DUMMY_DEVICES_TRANSPORT=HTTP" # Default transport used by dummy Io devices
      - "DUMMY_DEVICES_API_KEY=4jggokgpepnvsb2uv4s40d59ov"
      - "CONTEXT_BROKER=http://orion:1026/v2" # URL of the context broker to update context

  # Database
  mongo-db:
    labels:
      org.fiware: 'pc'
    image: mongo:4.2.8
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - 27017
    ports:
      - 27017:27017
    networks:
      - default
    volumes:
      - mongo-db:/data
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 5s
    

networks:
  default:
    labels:
      org.fiware: 'pc'
    ipam:
      config:
        - subnet: 172.18.1.0/24

volumes:
  mongo-db: ~
